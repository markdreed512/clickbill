{"version":3,"sources":["components/Wrapper/index.js","components/PicCard/index.js","components/Title/index.js","components/Score/index.js","components/GameOver/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","PicCard","state","clicked","styles","height","padding","this","gameOver","console","log","setState","shuffle","_this2","onClick","handleClick","style","alt","name","src","image","id","React","Component","Title","title","subTitle","Score","highScore","score","GameOver","_this","replay","App","pics","localStorage","getItem","done","i","length","j","Math","floor","random","temp","setItem","cards","map","pic","components_PicCard","key","components_Wrapper","components_Title","components_Score","components_GameOver","renderCards","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b932cc7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass PicCard extends React.Component {\r\n    state = {\r\n        clicked: false\r\n    }\r\n    styles = {\r\n        height: 130,\r\n        padding: 5\r\n    };\r\n    handleClick() {\r\n        if(this.state.clicked)\r\n        {\r\n            this.props.gameOver();\r\n        } else {\r\n            console.log(\"shuffle from pic\")\r\n            this.setState({\r\n                clicked: true\r\n            })\r\n            this.props.shuffle();\r\n        }\r\n    }\r\n    render() {\r\n        let props = this.props;\r\n        console.log(this.state)\r\n       \r\n        return (\r\n            <img onClick={() => {this.handleClick()}}style={this.styles}alt={props.name} src={props.image} id={props.id} clicked={props.clicked} />      \r\n        )\r\n    }\r\n}\r\nexport default PicCard;\r\n\r\n\r\n\r\n// <input type=\"checkbox\" value={data.id} defaultChecked={false} onClick={((e) => this.handleClick(e, data))}/>","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return (\r\n  <nav className=\"navbar\">\r\n    <div className=\"title\">{props.title}</div>\r\n    <div className=\"subtitle\">{props.subTitle}</div>\r\n  </nav>\r\n  )\r\n  \r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score (props){\r\n    return (\r\n        <div>\r\n            \r\n            <span> High Score: {props.highScore} </span>\r\n            <span id=\"score\">Score: {props.score}</span>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass GameOver extends React.Component {\r\n    render(){\r\n        console.log(\"This: \", this)\r\n        return (\r\n            <div>\r\n            <h1 className=\"gameOver\">Game Over</h1>\r\n            <button onClick={() => this.props.replay()}>Play Again</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GameOver","import React from \"react\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport PicCard from \"./components/PicCard\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport GameOver from \"./components/GameOver\";\nimport pics from \"./pics.json\";\n\nclass App extends React.Component {\n  state = {\n    pics: pics,\n    score: 0,\n    highScore: localStorage.getItem(\"high_score\"),\n    done: false\n  }\n  replay = () => {\n    /* change state back to done: false  */\n    this.setState({ \n      done: false\n    });\n }\n\n  shuffle = () => {\n    //Shuffle pics (Durstenfeld shuffle algorithm)\n    for (var i = pics.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = pics[i];\n      pics[i] = pics[j];\n      pics[j] = temp;\n    }\n    // Renderpics array\n    this.setState({ \n      score: this.state.score + 1,\n      pics });\n  };\n\n  gameOver = () => {\n    console.log(\"game over!\");\n    this.setState({\n      done: true\n    })\n    this.setState({\n      score: 0\n    })\n    //if score > highScore, save highScore and replace previous highScore\n    if (this.state.score > this.state.highScore) {\n      //set highscore in local storage then set state\n      // Store\n      localStorage.setItem(\"high_score\", this.state.score);\n\n      this.setState({\n        highScore: localStorage.getItem(\"high_score\")\n      })\n    } \n      \n  }\n\n  renderCards() {\n    const cards = this.state.pics.map(pic => (\n      <PicCard\n        key={pic.id}\n        id={pic.id}\n        name={pic.name}\n        image={pic.image}\n        shuffle={this.shuffle}\n        gameOver={this.gameOver}\n      />\n    ))\n      console.log(cards);\n    return cards;\n  }\n  render() {\n    \n    return (\n      <Wrapper>\n        <div className=\"container\">\n        <Title\n        title = \"Click-a-Bill\"\n        subTitle = \"Be nice--don't click twice!!\"\n        />\n        <Score\n        score = {this.state.score}\n        highScore = {this.state.highScore}\n        />\n        </div>\n          <div className=\"cardContainer\">\n          {!this.state.done ? this.renderCards() : <GameOver replay= {this.replay}/>}\n          </div> \n          \n      </Wrapper>\n    )\n\n\n\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}